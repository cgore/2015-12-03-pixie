% Copyright (c) 2015, Christopher Mark Gore,
% Soli Deo Gloria,
% All rights reserved.
%
% 2317 South River Road, Saint Charles, Missouri 63303 USA.
% Web: http://cgore.com
% Email: cgore@cgore.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%
%     * Neither the name of Christopher Mark Gore nor the names of other
%       contributors may be used to endorse or promote products derived from
%       this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

\documentclass{seminar}

\usepackage{fixltx2e} % Bugfixes for LaTeX 2e
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage[normalem]{ulem}
\usepackage{graphicx}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{librebaskerville} % Baskerville font
\usepackage{amsfonts}
\usepackage{listings}
\usepackage[dvips]{pstricks}
\usepackage{relsize}
\usepackage{textcomp}
\usepackage[normalem]{ulem}
\usepackage{wasysym}
\usepackage{dirtree}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{pifont}
\usepackage{keystroke}

\usepackage{tikz}
\usetikzlibrary{positioning,shapes,shadows,arrows}
\tikzstyle{module}=[draw,fill=white]
\tikzstyle{class}=[module, drop shadow]
\tikzstyle{detailedClass}=[class, rectangle split, rectangle split parts=2]
\tikzstyle{instance}=[draw,ellipse,fill=white,text=blue]
\tikzstyle{subclass}=[-open triangle 60, thick]
\tikzstyle{mixin}=[-open triangle 60, dashed]
\tikzstyle{instanceOf}=[->, thick]



\usepackage{semcolor,slidesec}
\input{seminar.bug}
\input{seminar.bg2}
% \input{seminar.bg3} % TODO: why is this missing on OSX?

\definecolor{fillcolor}{rgb}{0.9,0.95,1.0}
\definecolor{linecolor}{rgb}{0.8,0.85,0.9}
\slideframe[\psset{fillcolor=fillcolor,linecolor=linecolor}]{scshadow}

\newcommand{\hc}{Blue}
\newcommand{\h}[1]{\slideheading{\textcolor{\hc}{#1}}}
\newcommand{\tq}[1]{\textcolor{Green}{\textbf{#1}}}
\newcommand{\tbd}[1]{\textcolor{Blue}{\textit{#1}}}
\newcommand{\TODO}{{\Huge \textcolor{Red}{\textbf{{TO DO}}}}}

\definecolor{commentcolor}{rgb}{0.1,0.1,0.8}
\definecolor{identifiercolor}{rgb}{0.3,0.3,0.3}
\definecolor{keywordcolor}{rgb}{0.1,0.5,0.1}
\definecolor{cexcolor}{rgb}{0.25,0.25,0.4}
\lstset{
  basicstyle=\footnotesize\ttfamily,
  language=Lisp,
  morekeywords={make-instance},
  escapeinside={\%*}{*)},
  commentstyle=\itshape\color{commentcolor},
  identifierstyle=\color{identifiercolor},
  keywordstyle=\color{keywordcolor},
  upquote=true,
  numbers=left,
  numberstyle=\tiny\color{commentcolor},
  numbersep=5pt
}
\newcommand{\cex}[1]{\textcolor{cexcolor}{\textit{#1}}}

\newcommand{\shell}[1]{\texttt{\textbf{{\textcolor{Blue} \$}} #1}}

\newcommand{\xmark}{\textcolor{Red}{\ding{55}}}
\newcommand{\cmark}{\textcolor{Green}{\ding{51}}}

\newcommand{\SlideSection}[1]
{
  \begin{center}
    \textcolor{\hc}{\textbf{\emph{\Huge{#1}}}}
  \end{center}
}


\newcommand{\fullSlideImage}[1]{
  \begin{center}
    \includegraphics[width=4in,height=2.25in,keepaspectratio=true]{#1}
  \end{center}
}

\newcommand{\halfSlideImage}[1]{
  \includegraphics[width=2in,height=2.5in,keepaspectratio=true]{#1}
}

\newcommand{\rightSideImageName}{you-must-supply-the-image-name.eps}
\newenvironment{rightSideImage}[1]
{
  \renewcommand{\rightSideImageName}{#1}
  \begin{tabular}{lr}
    \begin{minipage}[b]{2in}
}
{
    \end{minipage}
    &
    \halfSlideImage{\rightSideImageName}
  \end{tabular}
}


\newpagestyle{cgore}{}{Chris Gore\hfil\thepage\hfil\texttt{cgore.com}}
\pagestyle{cgore}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\title{\psshadowbox{Pixie}}
\author{Christopher Mark Gore\\
  \texttt{cgore.com}}
\date{Thursday, December 3, {\smaller AD} 2015} % textsc doesn't seem to work for Baskerville.

\begin{document}

\raggedslides[0mm]


\begin{slide}
  \pagestyle{empty}
  \color{\hc}

  \begin{center}
    \includegraphics[height=1.25in]{lambda-sticker-blue.eps}
  \end{center}

  \maketitle

  \color{Black}
\end{slide}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{slide}
  \h{We write Clojure at The Climate Corporation,\\and we're hiring!  Come work
    with us!}
  \fullSlideImage{climate-logo-bluebg.eps}
\end{slide}


\begin{slide}
  \h{Some people actually program in languages other than Lisp.}

  \fullSlideImage{mccarthy.eps}
\end{slide}


\begin{slide}
  \h{I started using Common Lisp in 2004 for evolutionary computation as my
    M.S. thesis, and quickly learned to love Lisp.}

  \fullSlideImage{homersapien.eps}
\end{slide}


\begin{slide}
  \h{I even think markup languages in web forums should be full-fledged lisps.}

\begin{lstlisting}[language=TeX]
Welcome to the future of crapflooding!

\defun{\crapflood [\n]
  \dotimes{\n
    \b{Netcraft \blink{confirms} it;}
    the JVM is naked and petrified!
    \br
  }
}
\crapflood{1000}

\it{Wasn't that fun?}
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{And then I got a real job doing embedded C for an avionics firm up in
    Milwaukee.}

  \fullSlideImage{Airbus-A400M-MSN7.eps}
\end{slide}


\begin{slide}
  \h{Around 2009 I started messing around with Ruby a lot, and it's actually
    pretty nice for a not-quite-Lisp.}

  \fullSlideImage{ruby-blue.eps}
\end{slide}


\begin{slide}
  \h{But for the last two years, I've been doing Clojure as my main gig, and
    that's been pretty awesome.}

  \fullSlideImage{clojure-blue.eps}
\end{slide}


\begin{slide}
  \h{There's just one problem I really have with Clojure \textellipsis}

  \fullSlideImage{java-blue.eps}
\end{slide}


\begin{slide}
  \h{Pixie is very early in development, inspired by Clojure (but not a
    port/fork/clone), and doesn't run on top of the JVM.}

  \fullSlideImage{pixie-blue.eps}
\end{slide}


\begin{slide}
  \h{Pixie sits on top of RPython, a weird variant of Python for creating
    programming languages, originally created for PyPy.}

  \fullSlideImage{pypy-sticker-bluebg.eps}
\end{slide}

\begin{slide}
  \h{Let's make a Pixie!}

\begin{lstlisting}[language=sh]
$ git clone git@github.com:pixie-lang/pixie.git
$ cd pixie
$ make build_with_jit # This takes a while ...
$ ./pixie-vm # REPL = goodness
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Building Pixie takes a while, but at least it's pretty to watch it go.}

  \fullSlideImage{fractal-rpython.eps}
\end{slide}


\begin{slide}
  \h{Pixie has a decent startup time, so it's usable for tasks run from shell scripts.}

\begin{lstlisting}[language=sh]
$ time ./hello-world.pxi
Hello, world!

real	0m0.120s
user	0m0.110s
sys	0m0.008s
\end{lstlisting}

  \h{Ruby for comparison:}

\begin{lstlisting}[language=sh]
$ time ./hello-world.rb
Hello, world!

real	0m0.033s
user	0m0.026s
sys	0m0.006s
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{How long does this take with Clojure?}
  
\begin{lstlisting}[language=sh]
$ time lein exec hello-world.clj
Hello, world!

real	0m4.823s
user	0m17.321s
sys	0m0.599s
\end{lstlisting}

  \h{The JVM takes forever to start.}

\end{slide}


\begin{slide}
  \h{There's a \texttt{pixie-mode} for Emacs.}

  \begin{itemize}
  \item On Github: \texttt{https://github.com/johnwalker/pixie-mode}
  \item M-x package-install \Return pixie-mode \Return
  \item Make sure to have a build of Pixie on your path, I put mine at
    \texttt{/opt/pixie}.
  \item Add that to \texttt{PATH} environment variable in Emacs.
  \item Add that to \texttt{exec-path} in Emacs too.
  \item Then just C-c~C-z
    to launch a Pixie REPL from a Pixie code file.
  \end{itemize}
\end{slide}


\begin{slide}
  \h{There's already a lot of cool stuff there.}

\begin{lstlisting}
$ ./pixie-vm    
user => "Hello, Pixie!" ; Strings!
"Hello, Pixie!"
user => (println "Hello, Pixie!") ; Printing to the screen!
Hello, Pixie!
nil
user => (+ 1 2 3) ; Math!
6
user => (defn foo [x] (+ x 4077)) ; Functions!
<inst pixie.stdlib.Var>
user => (foo 12)
4089
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Namespaces work in manner just like in Clojure.}

  
\begin{lstlisting}
user => (ns foo (:require [pixie.math :as math]))
nil
foo => (math/sin 1.2)
0.932039
foo => (math/sin 0.0)
0.000000
foo => (math/sin 3.14159)
0.000003
foo => (math/sin (/ 3.14159 2))
1.000000
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Lots of basic stuff isn't quite there yet though.}

  
\begin{lstlisting}
foo => math/PI
ERROR:
 in pixie function repl_fn

in pixie/repl.pxi at 27:24
               (let [x (eval form)]
                       ^
in internal function eval

in <unknown> at 5:1
math/PI
^
RuntimeException: :pixie.stdlib/AssertionException
Var PI is undefined
\end{lstlisting}
\end{slide}

\begin{slide}
  \h{But it's open source and they are quite open to pull requests, so we can
    add what we want!}

  \fullSlideImage{adding-pi-to-pixie.eps}
\end{slide}


\begin{slide}
  \h{Numerics work similar to Clojure.}

\begin{lstlisting}
user => (+ 1 2)
3
user => (+ 1 2.0)
3.000000
user => (/ 1 2)
1/2 ; That's right, we can do fractions.
user => (/ 1 2.0)
0.500000
user => (/ 12)
1/12
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Strings work just like in Clojure.}

\begin{lstlisting}
user => "foo"
"foo"
user => (ns foo (:require [pixie.string :as s]))
nil
foo => (str "foo" "bar")
"foobar"
foo => (count "foo")
3
foo => (s/upper-case "why should we shout?")
"WHY SHOULD WE SHOUT?"
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Vectors work just like in Clojure.}

\begin{lstlisting}
user => (vector)
[]
user => []
[]
user => [1 2 3]
[1 2 3]
user => [1 2 "three" :four]
[1 2 "three" :four]
user => (= [1 2 3] [1 2 3])
true
user => (count [1 2 3])
3
user => (first [1 2 3])
1
user => (conj [1 2 3] 4)
[1 2 3 4]
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Lists work just like in Clojure.}

\begin{lstlisting}
user => (list)
()
user => (1 2 3) ; This isn't right.
ERROR: ...
user => '(1 2 3) ; This works.
(1 2 3)
user => '(1 2 "three" :four)
(1 2 "three" :four)
user => (= '(1 2 3) '(1 2 3))
true
user => (count '(1 2 3))
3
user => (first '(1 2 3))
1
user => (conj '(1 2 3) 4)
(4 1 2 3) ; Clojure does it this way too.
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Hash maps work just like in Clojure.}

\begin{lstlisting}
user => {:a 1 :b 2 :c 3}
{:a 1, :c 3, :b 2}
user => (def m {:a 1 :b 2 :c 3})
<inst pixie.stdlib.Var>
user => (:a m) ; Treating the hash map as the argument.
1
user => (m :a) ; Treating the hash map as the function.
1
user => (merge m {:d 4})
{:d 4, :a 1, :c 3, :b 2}
user => (keys m)
[:a :c :b]
user => (vals m)
[1 3 2]
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Sets work a lot like in Clojure.}

\begin{lstlisting}
user => (hash-set)
#{}
user => #{1 2 3}
#{1 3 2}
user => (count #{1 2 "three" :four})
4
user => (conj #{1 2 3} 4)
#{1 3 2 4}
user => (ns foo (:require [pixie.set :as s]))
nil
foo => (s/union #{1 2 3} #{4 5 6})
#{1 3 5 2 6 4}
foo => (s/difference #{1 2 3 4 5} #{3 4})
#{1 5 2}
foo => (s/intersection #{1 2 3 4 5} #{4 5 6 7 8})
#{5 4}
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Functions work a lot like in Clojure.}

\begin{lstlisting}
user => (defn f [x] (+ x 2)) ; Define a function.
<inst pixie.stdlib.Var>
user => (f 12)
14
user => (def g (fn [x] (+ x 3))) ; Or just def a lambda.
<inst pixie.stdlib.Var>
user => (g 12)
15
user => ((fn [x] (+ x 4)) 12) ; Why bother naming things?
16
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{You have atoms just like in Clojure.}

\begin{lstlisting}
user => (def a (atom 1))
<inst pixie.stdlib.Var>
user => a
<inst pixie.stdlib.Atom>
user => @a
1
user => (reset! a 7)
7
user => @a
7
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{You can have anonymous function literals, just like in Clojure.}

\begin{lstlisting}
user => (map #(+ % 2)
          [1 2 3])
(3 4 5)
user => (map #(+ %1 %2)
          [1 2 3]
          [4 5 6])
(5 7 9)
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{All the basic logic and control flow you would expect is available, and
    typically works exactly like it does in Clojure.}

\begin{lstlisting}
user => (defn small [x]
          (if (< x 100)
            (println x "is pretty small.")
            (println "Wow," x "is huge!")))
<inst pixie.stdlib.Var>
user => (small 12)
12 is pretty small.
nil
user => (small 1000)
Wow, 1000 is huge!
nil
\end{lstlisting}
\end{slide}


\begin{slide}
  \h{Conclusion}

  Pixie is a fun little language with a lot of promise.
  Using it for important production code today is probably asking to get fired,
  but it's already an okay choice for some simple scripting tasks.
  Help out and it'll be ready for prime time sometime soon!

  \vfill
  \raggedleft
  \textcolor{\hc}{\textbf{\emph{\Huge{Questions?}}}}
\end{slide}
\end{document}
